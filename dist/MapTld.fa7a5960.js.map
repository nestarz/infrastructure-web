{"version":3,"sources":["components/MapTld.vue"],"names":[],"mappings":";;;;;;;AAqCA;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJA,MAAA,cAAA,GAAA,UAAA,GAAA,EAAA;AACA,QAAA,IAAA,GAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,SAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,CAHA;;eAMA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GADA;;AAIA,EAAA,KAAA,CAAA,KAAA,EAAA;AAAA,IAAA;AAAA,GAAA,EAAA;AACA,UAAA,WAAA,GAAA;AACA,MAAA,OAAA,EAAA,MADA;AAEA,MAAA,SAAA,EAAA,QAFA;AAGA,sBAAA;AAHA,KAAA;AAKA,UAAA,IAAA,GAAA,yBAAA,IAAA,CAAA;AACA,UAAA,UAAA,GAAA,yBAAA,IAAA,CAAA;AACA,IAAA,KAAA,CAAA,wBAAA,CAAA,CACA,IADA,CACA,CAAA,IAAA,CAAA,CAAA,IAAA,EADA,EAEA,IAFA,CAEA,IAAA,IACA,MAAA,CAAA,IAAA,CAAA,IAAA,EACA,MADA,CACA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,MADA,EAEA,MAFA,CAEA,GAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAAA,KAAA,cAFA,EAGA,GAHA,CAGA,GAAA,IAAA;AACA,aAAA;AACA,QAAA,MAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA,IAFA;AAGA,QAAA,QAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,QAHA;AAIA,QAAA,SAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,SAJA;AAKA,QAAA,GAAA,EAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AALA,OAAA;AAOA,KAXA,CAHA,EAgBA,IAhBA,CAgBA,IAAA,IAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA,EAAA,CAhBA,EAiBA;AAjBA,KAkBA,IAlBA,CAkBA,MAAA;AACA,YAAA,SAAA,GAAA,MACA,UAAA,CAAA,KAAA,GACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,CAFA;;AAGA,MAAA,SAAA;AACA,MAAA,WAAA,CAAA,MAAA,SAAA,EAAA,EAAA,IAAA,CAAA;AACA,KAxBA;AA0BA,UAAA;AAAA,MAAA;AAAA,QAAA,wBAAA;AACA,+BAAA,UAAA,EAAA,MAAA;AACA,MAAA,IAAA;AACA,KAFA;AAIA,WAAA;AACA,MAAA,UADA;AAEA,MAAA,IAFA;AAGA,MAAA,SAAA,EAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,KAAA;AACA,YAAA,OAAA,IAAA,OAAA,CAAA,MAAA,EAAA;AACA,iBAAA,OAAA,CAAA,MAAA,KAAA,MAAA,GAAA,QAAA,GAAA,OAAA;AACA;;AACA,eAAA,WAAA,CAAA,IAAA,CAAA,IAAA,OAAA;AACA;AARA,KAAA;AAUA;;AArDA","file":"MapTld.fa7a5960.js","sourceRoot":"../src","sourcesContent":["<template>\n  <div>\n      <portal :to=\"to\" tag=\"g\" slim v-for=\"to in ['map', 'tor']\" :key=\"to\">\n      <template v-for=\"{domain, latitude, longitude, type} in TLDs\">\n        <map-marker\n          v-if=\"currentTLD\"\n          :coordinates=\"[longitude, latitude]\"\n          :key=\"domain\"\n          :r=\"currentTLD.domain === domain ? 24 : 1\"\n          :fill=\"colorType(type, domain, currentTLD)\"\n        >\n          <circle\n            :r=\"currentTLD.domain === domain ? 20 : 1\"\n            :fill=\"colorType(type, domain, currentTLD)\"\n          />\n        </map-marker>\n      </template>\n      <map-line\n        v-if=\"currentTLD\"\n        :from=\"[-118.419444, 33.976389]\"\n        :to=\"[currentTLD.longitude, currentTLD.latitude]\"\n        :stroke-width=\"12\"\n        :stroke=\"'yellow'\"\n      ></map-line>\n    </portal>\n    <pre v-if=\"currentTLD\">{{ currentTLD.raw }}</pre>\n    <!-- <ul>\n      <li\n        v-for=\"{domain} in TLDs\"\n        :key=\"domain\"\n        :class=\"{active: currentTLD.domain === domain}\"\n      >{{ domain }}</li>\n    </ul>-->\n  </div>\n</template>\n\n<script>\nimport { ref, computed, watch, onMounted } from \"@vue/composition-api\";\n\nconst randomProperty = function(obj) {\n  const keys = Object.keys(obj);\n  return obj[keys[(keys.length * Math.random()) << 0]];\n};\nimport useSound from \"~/utils/vue-sound.js\";\n\nexport default {\n  props: {\n    hostname: String\n  },\n  setup(props, { emit }) {\n    const typeByColor = {\n      generic: \"blue\",\n      sponsored: \"yellow\",\n      \"country-code\": \"yellow\"\n    };\n    const TLDs = ref(null);\n    const currentTLD = ref(null);\n    fetch(\"/assets/json/tlds.json\")\n      .then(r => r.json())\n      .then(data =>\n        Object.keys(data)\n          .filter(key => data[key].geo && data[key].geo.length)\n          .filter(key => data[key].Type === \"country-code\")\n          .map(key => {\n            return {\n              domain: key,\n              type: data[key].Type,\n              latitude: data[key].geo[0].latitude,\n              longitude: data[key].geo[0].longitude,\n              raw: data[key].__raw\n            };\n          })\n      )\n      .then(data => (TLDs.value = data.slice(0, 10)))\n      // .then(() => [...Array(2340).keys()].forEach(i => clearInterval(i))) // hack\n      .then(() => {\n        const randomize = () =>\n          (currentTLD.value =\n            TLDs.value[Math.floor(TLDs.value.length * Math.random())]);\n        randomize();\n        setInterval(() => randomize(), 2500);\n      });\n\n    const { play } = useSound();\n    watch(currentTLD, () => {\n      play();\n    });\n\n    return {\n      currentTLD,\n      TLDs,\n      colorType: (type, domain, current) => {\n        if (current && current.domain) {\n          return current.domain === domain ? \"yellow\" : \"white\";\n        }\n        return typeByColor[type] || \"black\";\n      }\n    };\n  }\n};\n</script>\n\n<style scoped>\npre {\n  width: 100%;\n  max-width: 66rem;\n  overflow: hidden;\n  font-size: 1em;\n  text-align: left;\n}\nul {\n  columns: 3;\n}\nli {\n  font-size: 5px;\n  list-style: none;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n    Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n}\nli.active {\n  font-size: 40px;\n}\n</style>"]}